name: Run Playwright Tests

# Определение триггеров для запуска workflow
on:
  push:
    branches:
      - master 
    paths-ignore:
      - '**.md' # Игнорирование изменений в markdown-файлах
  pull_request:
    branches: master 
    paths-ignore:
      - '**.md' # Игнорирование изменений в markdown-файлах

jobs:
  test:
    timeout-minutes: 20 # Увеличенное ограничение времени выполнения job
    runs-on: ${{ matrix.os }}

    # Определение матрицы для запуска тестов на разных операционных системах и браузерах
    strategy:
      fail-fast: false # Отключаем поведение fail-fast, чтобы все тесты выполнялись до конца
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest] # Запуск на Ubuntu, Windows и macOS
        browser: [chromium, firefox] # Браузеры для тестирования на всех ОС
        include:
          - os: ubuntu-latest
            browser: webkit # Добавляем webkit только для Ubuntu
          - os: macos-latest
            browser: webkit # Добавляем webkit для macOS

    steps:
      # Шаг 1: Клонирование репозитория
      - uses: actions/checkout@v4

      # Шаг 2: Настройка Node.js для использования LTS-версии
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Шаг 3: Установка системных зависимостей Playwright для запуска браузеров
      - name: Install Playwright dependencies
        if: runner.os == 'Linux' # Выполняется только на Linux, т.к. Windows и macOS не нуждаются в этих зависимостях
        run: npx playwright install-deps

      # Шаг 4: Кэширование браузеров Playwright для ускорения скачивания
      - name: Cache Playwright browsers
        uses: actions/cache@v4 # Обновлено до v4 для поддержки Node.js 20
        with:
          path: ~/.cache/ms-playwright # Кэшируемая папка с браузерами Playwright
          key: ${{ runner.os }}-playwright-${{ matrix.browser }}-${{ hashFiles('**/package-lock.json') }} # Уникальный ключ для кэша
          restore-keys: |
            ${{ runner.os }}-playwright-${{ matrix.browser }}- # Убираем запятые из ключа

      # Шаг 5: Установка зависимостей без загрузки браузеров Playwright
      - name: Install dependencies without downloading browsers
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1 # Переменная окружения для пропуска загрузки браузеров
        run: yarn install # Устанавливаем зависимости проекта

      # Шаг 6: Установка только нужного браузера
      - name: Install specific Playwright Browser
        run: |
          # Проверяем браузер, указанный в матрице, и устанавливаем только его
          if [ "${{ matrix.browser }}" == "chromium" ]; then
            npx playwright install chromium
          elif [ "${{ matrix.browser }}" == "firefox" ]; then
            npx playwright install firefox
          elif [ "${{ matrix.browser }}" == "webkit" ]; then
            npx playwright install webkit
          fi
        shell: bash # Указываем bash, чтобы избежать проблем с синтаксисом на Windows

      # Шаг 7: Запуск тестов Playwright для указанного браузера
      - name: Run Playwright tests
        run: |
          yarn playwright test --project=${{ matrix.browser }} --reporter=list # Запуск тестов с выводом детализированного лога

      # Шаг 8: Генерация отчета Allure
      - name: Generate Allure Report
        if: always() # Выполняется независимо от результата предыдущих шагов
        run: |
          # Используем yarn для генерации отчета Allure и сохранения его в allure-report
          yarn run allure generate allure-results --clean -o allure-report

      # Шаг 9: Загрузка отчета Allure как артефакта для публикации на GitHub Pages
      - name: Upload Allure Report Artifact
        if: always() # Выполняется независимо от результата предыдущих шагов
        uses: actions/upload-artifact@v4 # Обновлено на v4 для поддержки Node.js 20
        with:
          name: allure-report-${{ matrix.os }}-${{ matrix.browser }} # Уникальное имя артефакта для предотвращения конфликтов
          path: allure-report # Путь к сгенерированному отчету Allure

  # Публикация Allure отчета на GitHub Pages
  deploy:
    needs: test # Зависимость от завершения всех тестов
    runs-on: ubuntu-latest
    if: always() # Гарантирует выполнение deploy даже при ошибках в тестах
    permissions:
      pages: write # Права на запись для публикации на GitHub Pages
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v1 # Публикует отчет на GitHub Pages
