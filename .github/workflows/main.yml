name: Run Playwright Tests

on:
  push:
    branches:
      - master  # Запуск на каждом пуше в ветку master
    paths-ignore:
      - '**.md'  # Игнорировать изменения в .md файлах
  pull_request:
    branches: master
    paths-ignore:
      - '**.md'  # Игнорировать изменения в .md файлах

jobs:
  test:
    timeout-minutes: 10  # Максимальное время выполнения джоба
    runs-on: ${{ matrix.os }}  # Выбор ОС из матрицы

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # Запускаем только на Ubuntu и macOS
        browser: [chromium, firefox, webkit]  # Тестируем на трёх браузерах

    steps:
      - uses: actions/checkout@v4  # Шаг для клонирования репозитория

      - uses: actions/setup-node@v4  # Устанавливаем Node.js
        with:
          node-version: lts/*  # Используем версию с долгосрочной поддержкой

      - name: Install Playwright dependencies
        run: yarn install  # Установка зависимостей проекта

      - name: Cache Playwright browsers
        uses: actions/cache@v4  # Кешируем браузеры для ускорения повторных запусков
        with:
          path: ~/.cache/ms-playwright  # Путь к кешу Playwright
          key: ${{ runner.os }}-playwright-${{ matrix.browser }}  # Ключ кеша, включающий ОС и браузер

      - name: Install specific Playwright Browser
        run: |
          # Проверка и установка конкретного браузера из матрицы
          if [ "${{ matrix.browser }}" == "chromium" ]; then
            npx playwright install chromium;
          elif [ "${{ matrix.browser }}" == "firefox" ]; then
            npx playwright install firefox;
          elif [ "${{ matrix.browser }}" == "webkit" ]; then
            npx playwright install webkit;
          fi

      - name: Run Playwright tests
        run: yarn playwright test --project=${{ matrix.browser }} --reporter=list  # Запуск тестов с детализацией логов

      - name: Generate Allure Report
        # Создание папки для объединённых отчётов
        run: |
          mkdir -p combined-allure-report
          if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
            cp -r allure-results/* combined-allure-report/  # Копирование всех результатов в общую папку
          else
            echo "No allure-results found" && exit 0  # Пропуск следующих шагов, если отчёты не найдены
          fi

      - name: Upload Allure Report Artifact
        # Загружаем Allure отчет как артефакт для дальнейшего использования в деплое
        uses: actions/upload-artifact@v4
        with:
          name: combined-allure-report
          path: combined-allure-report/

  deploy:
    needs: test  # Запускается после завершения тестового джоба
    runs-on: ubuntu-latest  # Запуск деплоя на Ubuntu

    steps:
      - name: Deploy to GitHub Pages
        # Используем обновлённую версию actions/deploy-pages@v2
        uses: actions/deploy-pages@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # Токен для доступа к GitHub Pages
          artifact_name: "combined-allure-report"  # Имя артефакта для деплоя
