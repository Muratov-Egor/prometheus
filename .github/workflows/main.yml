name: Run Playwright Tests

on:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ${{ matrix.os }}
    # Указываем на каких платформах будут запускаться тесты
    strategy:
      fail-fast: false # Отключаем "fail-fast", чтобы падение одной задачи не отменяло остальные
      matrix:
        os: [ubuntu-latest, macos-latest] # Используем только Linux и macOS
        browser: [chromium, firefox, webkit] # Браузеры для тестирования

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        # Скачиваем код из репозитория

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Обновляем Node.js до версии 18, чтобы соответствовать требованиям Playwright

      - name: Install Playwright dependencies
        run: yarn install --frozen-lockfile
        # Устанавливаем все зависимости проекта, используя Yarn

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ matrix.browser }}
          restore-keys: |
            ${{ runner.os }}-playwright-${{ matrix.browser }}
        # Кэшируем браузеры Playwright для ускорения

      - name: Install specific Playwright Browser
        run: |
          if [ "${{ matrix.browser }}" == "chromium" ]; then
            npx playwright install chromium
          elif [ "${{ matrix.browser }}" == "firefox" ]; then
            npx playwright install firefox
          elif [ "${{ matrix.browser }}" == "webkit" ]; then
            npx playwright install webkit
          fi
        # Устанавливаем только тот браузер, который нужен для текущего теста

      - name: Run Playwright tests
        run: yarn playwright test --project=${{ matrix.browser }} --reporter=list
        # Запускаем тесты для текущего браузера, выводя детализированные логи

      - name: Generate Allure Report
        run: |
          mkdir -p combined-allure-report # Создаем папку для объединенных отчетов
          if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
            cp -r allure-results/* combined-allure-report/
          else
            exit 0 # Пропускаем следующий шаг, если отчеты не найдены
          fi
        # Копируем отчеты в общую папку, если они существуют

      - name: Upload Allure Report Artifact
        if: always() # Всегда выполняем этот шаг
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ matrix.os }}-${{ matrix.browser }}
          path: combined-allure-report/
        # Загружаем Allure отчеты как артефакт

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        # Деплой отчета на GitHub Pages
